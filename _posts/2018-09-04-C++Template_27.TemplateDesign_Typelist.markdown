---
layout: post
title:  "C++Template&nbsp;27.&nbsp;TemplateDesign_Typelist"
date:   2018-09-04 03:18:15 +0700
categories: [c++]
---

codenuri 강석민 강사 강의 내용기반으로 정리한 내용입니다.

---

> Typelist intro.

Andrei Alexandrescue, loki 라이브러리

Modern C++ Design 도 읽어보기

##### Typelist

1. 값을 보관하지 않는다.
2. N 개의 타입을 보관한다.

``` cpp

template<typename T, typename U> struct Typelist
{
	typedef T Head;
	typedef U Tail;
}

int main()
{
	Typelist<int, double> t1; 
	Typelist<int, Typelist<int, double>> t2; 
	Typelist<int, Typelist<int, Typelist<int, double>>> t3; 
}

```

---

> Step2. NullType 와 매크로 도입

Typelist: 타입을 여러개 보관하는 type의 list(값이 아님.)

``` cpp

template<typename T, typename U> struct Typelist
{
	typedef T Head;
	typedef U Tail;
}

struct NullType{};

// 매크로 도입

#define TYPELIST_1(T1) Typlelist<T1, NullType>;
#define TYPELIST_2(T1, T2) Typlelist<T1, Typelist<T2, NullType>>;
#define TYPELIST_3(T1, T2, T3) Typlelist<T1, Typelist<T2, Typelist<T3, NullType>>>;
#define TYPELIST_4(T1, T2, T3, T4) Typlelist<T1, Typelist<T2, Typelist<T3, Typelist<T4, NullType>>>>;

int main()
{
	Typelist<int, NullType> t1;
	Typelist<int, Typelist<double, NullType>> t2;
	Typelist<int, Typelist<double, Typelist<char, NullType>>> t3;

	// 매크로 도입
	TYPELIST_4(int, double, char, short) t4;
}

```

---


``` cpp

template<typename T, typename U> struct Typelist
{
	typedef T Head;
	typedef U Tail;
}

struct NullType{};

// 매크로 도입

#define TYPELIST_1(T1) Typlelist<T1, NullType>;
#define TYPELIST_2(T1, T2) Typlelist<T1, Typelist<T2, NullType>>;
#define TYPELIST_3(T1, T2, T3) Typlelist<T1, Typelist<T2, Typelist<T3, NullType>>>;
#define TYPELIST_4(T1, T2, T3, T4) Typlelist<T1, Typelist<T2, Typelist<T3, Typelist<T4, NullType>>>>;

//---------------------------------------------------------------------

template<typename T> class xtuple {};

int main()
{
	// xtuple<int> t1;

	xtuple<TYPELIST_3(int, double, char)> t1;
}

```

---

> Typelist Length

``` cpp
#include <iostream>
using namespace std;

template<typename T, typename U> struct Typelist
{
	typedef T Head;
	typedef U Tail;
}

struct NullType{};

#define TYPELIST_1(T1) Typlelist<T1, NullType>;
#define TYPELIST_2(T1, T2) Typlelist<T1, Typelist<T2, NullType>>;
#define TYPELIST_3(T1, T2, T3) Typlelist<T1, Typelist<T2, Typelist<T3, NullType>>>;
#define TYPELIST_4(T1, T2, T3, T4) Typlelist<T1, Typelist<T2, Typelist<T3, Typelist<T4, NullType>>>>;

//---------------------------------------------------------------------
// Typelist의 요소 갯수 구하기.

// 1. 사용하는 모습을 보고 primary template 작성
template<typename T> struct Length
{
	// enum { value = ? }; // constexpr value 를 요즘에는 많이 사용
}

// 2. 갯수를 구할 수 있도록 부분 특수화
template<typename T, typename U> struct Length<Typelist<T, U>>
{
	enum { value = Length<U>::value + 1 };
}

// 3. 재귀를 종료 하기 위한 전문화
template<> struct Length<NullType>
{
	enum { value = 0 };
}

template<typename T> void test() 
{
	cout << Length<T>::value << endl; // 4

};

int main()
{
	test<TYPELIST_4(int, char, short, double)>();
}

```

---

> TypeAt

