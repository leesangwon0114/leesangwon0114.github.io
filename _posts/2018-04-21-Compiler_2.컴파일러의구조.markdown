---
layout: post
title:  "Compiler&nbsp;2.&nbsp;컴파일러의구조"
date:   2018-04-21 04:28:15 +0700
categories: [Compiler]
---

#### 컴파일러의 구조

C언어에서 의미있는 단어를 토큰이라고함

어떤 토근이 사용되어있는지 구분하는 것이 - 어휘분석

토큰들이 문법에 맞는지 검사 - 구문분석

형 type 검사를 하는 - 의미분석

의미 분석으로 생성된 코드의 실행시간을 줄이거나 기억 장소를 줄이기 위한 - 코드 최적화

목적기계의 특성을 고려하여 - 목적코드 생성

![Alt text](http://leesangwon0114.github.io/static/img/Compiler/2.1.PNG)

전단부는 언어에 후단부는 기계에 종속성을 가짐

전단부에서 작성한 것을 os 에 맞게 다른 곳에 실행되도록하는 것이 포팅

L * m -> L + M

전단부 후단부 나눠놓으면서 이식이 쉬워짐


---

#### 컴파일러의 논리적 구조

![Alt text](http://leesangwon0114.github.io/static/img/Compiler/2.2.PNG)

기호표 관리(심블테이블)
에러 처리와함께 중간과정 공유